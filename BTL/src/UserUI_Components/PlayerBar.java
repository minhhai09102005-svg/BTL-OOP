package UserUI_Components;

import Default.Song;
import javafx.geometry.*;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import Sidebar_Options.PlaylistUI;
import Sidebar_Options.FavouriteUI;


///** Thanh ph√°t nh·∫°c d∆∞·ªõi c√πng + nh·∫≠n play(Song) t·ª´ HomeUI */
public class PlayerBar extends HBox implements Song.PlayerController {

    // --- fields c·∫ßn truy c·∫≠p l·∫°i trong play()/toggle ---
    private final Button btnLike = new Button("‚ô•"); // [ADDED] gi·ªØ tham chi·∫øu ƒë·ªÉ sync m√†u khi ƒë·ªïi b√†i
    private final ImageView cover = new ImageView();
    private final Label titleLbl = new Label("Song");
    private final Label artistLbl = new Label("Artist");
    private final Label lblCurrent = new Label("0:00");
    private final Label lblTotal = new Label("0:00");
    private final Slider progress = new Slider(0, 205, 0); // range s·∫Ω set l·∫°i khi play()
    private final Button btnPrev = new Button("‚èÆ");
    private final Button btnPlay = new Button("‚èµ");
    private final Button btnNext = new Button("‚è≠");

    // --- state ---
    private boolean isPlaying = false;
    private boolean liked = false;       // tr·∫°ng th√°i tr√°i tim ‚ô• (ƒë·ªìng b·ªô v·ªõi current.isFavourite) [CHANGED: d√πng l√†m cache hi·ªÉn th·ªã]
    private boolean repeating = false;   // tr·∫°ng th√°i l·∫∑p ‚Üª
    private Song current;                // b√†i ƒëang ph√°t

    public PlayerBar() {
        // ===== Khung t·ªïng =====
        setAlignment(Pos.CENTER_LEFT);
        setSpacing(16);
        setPadding(new Insets(10, 14, 10, 14));
        setPrefHeight(70);
        setMinHeight(70);
        setMaxHeight(70);
        setStyle("-fx-background-color: #000000; -fx-background-radius: 10;");

        // ===== C·ª§M TR√ÅI: cover + meta + add-to-playlist =====
        try {
            cover.setImage(new Image(getClass().getResource("/image/9e0f8784ffebf6865c83c5e526274f31_1465465806.jpg").toExternalForm()));
        } catch (Exception ignore) {}
        cover.setFitWidth(48);
        cover.setFitHeight(48);
        Rectangle clip = new Rectangle(48, 48);
        clip.setArcWidth(10);
        clip.setArcHeight(10);
        cover.setClip(clip);

        titleLbl.setStyle("-fx-text-fill: white; -fx-font-size: 14px; -fx-font-weight: 800;");
        artistLbl.setStyle("-fx-text-fill: #B3B3B3; -fx-font-size: 12px; -fx-font-weight: 600;");
        VBox metaBox = new VBox(2, titleLbl, artistLbl);
        metaBox.setAlignment(Pos.CENTER_LEFT);

        // (+) N√∫t th√™m v√†o My Playlists (gi·ªØ hi·ªáu ·ª©ng ph√≥ng to khi hover, ƒë√∫ng code c≈©)
        Button btnAddToPlaylist = new Button("‚äï");
        btnAddToPlaylist.setBackground(Background.EMPTY);
        btnAddToPlaylist.setBorder(Border.EMPTY);
        btnAddToPlaylist.setFocusTraversable(false);
        btnAddToPlaylist.setStyle(
            "-fx-background-color: transparent;" +
            "-fx-text-fill: white;" +
            "-fx-font-size: 35px;" +
            "-fx-font-weight: 700;" +
            "-fx-cursor: hand;" +
            "-fx-padding: 0;"
        );
        btnAddToPlaylist.setOnMouseEntered(e -> { btnAddToPlaylist.setScaleX(1.25); btnAddToPlaylist.setScaleY(1.25); });
        btnAddToPlaylist.setOnMouseExited(e -> { btnAddToPlaylist.setScaleX(1.0); btnAddToPlaylist.setScaleY(1.0); });
        btnAddToPlaylist.setOnAction(e -> {
            if (current == null) return;           // ch∆∞a c√≥ b√†i n√†o ƒëang ph√°t
            if (!current.isPlaylist()) {           // ch∆∞a n·∫±m trong playlist -> ƒë√°nh d·∫•u
                current.setPlaylist(true);
            }
            PlaylistUI.add(current);               // g·ªçi th·∫≥ng sang PlaylistUI (static)
        });

        StackPane addWrap = new StackPane(btnAddToPlaylist);
        addWrap.setPrefSize(48, 48); addWrap.setMinSize(48, 48); addWrap.setMaxSize(48, 48);
        addWrap.setAlignment(Pos.CENTER);

        HBox leftBox = new HBox(20, cover, metaBox, addWrap);
        leftBox.setAlignment(Pos.CENTER_LEFT);

        // ===== C·ª§M GI·ªÆA: prev/play/next + th·ªùi gian =====
        for (Button b : new Button[]{btnPrev, btnPlay, btnNext}) {
            b.setBackground(Background.EMPTY);
            b.setBorder(Border.EMPTY);
            b.setStyle("-fx-background-color: transparent; -fx-text-fill: white;" +
                    "-fx-font-size: 18px; -fx-font-weight: 700; -fx-cursor: hand;" +
                    "-fx-focus-color: transparent; -fx-faint-focus-color: transparent;");
        }
        btnPrev.setOnAction(e -> onPrev());
        btnPlay.setOnAction(e -> togglePause());
        btnNext.setOnAction(e -> onNext());

        HBox controlsRow = new HBox(20, btnPrev, btnPlay, btnNext);
        controlsRow.setAlignment(Pos.CENTER);

        lblCurrent.setStyle("-fx-text-fill: #C9D1D9; -fx-font-size: 12px; -fx-font-weight: 700;");
        lblTotal.setStyle("-fx-text-fill: #C9D1D9; -fx-font-size: 12px; -fx-font-weight: 700;");

        progress.setBlockIncrement(1);
        progress.setShowTickMarks(false);
        progress.setShowTickLabels(false);
        progress.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(progress, Priority.ALWAYS);
        progress.setStyle("-fx-control-inner-background: #6B7280; -fx-base: #D1D5DB;");
        progress.valueProperty().addListener((obs, ov, nv) -> {
            int s = nv.intValue();
            lblCurrent.setText(String.format("%d:%02d", s / 60, s % 60));
            // TODO backend: seekTo(s)
        });

        HBox timeRow = new HBox(10, lblCurrent, progress, lblTotal);
        timeRow.setAlignment(Pos.CENTER);

        VBox centerBox = new VBox(6, controlsRow, timeRow);
        centerBox.setAlignment(Pos.CENTER);
        HBox.setHgrow(centerBox, Priority.ALWAYS);

        // ===== C·ª§M PH·∫¢I: volume + like + repeat =====
        Button volButton = new Button("üîä");
        volButton.setBackground(Background.EMPTY);
        volButton.setBorder(Border.EMPTY);
        volButton.setFocusTraversable(false);
        volButton.setStyle("-fx-background-color: transparent; -fx-background-insets: 0; -fx-background-radius: 0;" +
                "-fx-border-color: transparent; -fx-focus-color: transparent; -fx-faint-focus-color: transparent;" +
                "-fx-padding: 0; -fx-text-fill: white; -fx-font-size: 14px;");

        Slider vol = new Slider(0, 1, 0.8);
        vol.setPrefWidth(110); vol.setMaxWidth(110); vol.setMinWidth(80);
        vol.setFocusTraversable(false);
        vol.setShowTickMarks(false); vol.setShowTickLabels(false);
        vol.setStyle("-fx-control-inner-background: #6B7280; -fx-base: #D1D5DB;");

        final double[] lastVol = {vol.getValue()};
        final boolean[] muted = {false};
        vol.valueProperty().addListener((o, ov, nv) -> {
            double v = nv.doubleValue();
            if (v <= 0.0001) { muted[0] = true; volButton.setText("üîá"); }
            else { muted[0] = false; volButton.setText("üîä"); lastVol[0] = v; }
            // TODO backend setVolume(v)
        });
        volButton.setOnAction(e -> {
            if (!muted[0]) {
                if (vol.getValue() <= 0.0001) lastVol[0] = 0.3;
                vol.setValue(0); // mute
            } else {
                vol.setValue(Math.max(lastVol[0], 0.05)); // unmute
            }
        });

        // ‚ô• Like (toggle ƒë·ªè ‚áÑ tr·∫Øng) ‚Äî ƒë·ªìng b·ªô v·ªõi Song.isFavourite
        btnLike.setTextFill(Color.WHITE);
        btnLike.setBackground(Background.EMPTY);
        btnLike.setBorder(Border.EMPTY);
        btnLike.setFocusTraversable(false);
        btnLike.setStyle("-fx-background-color: transparent; -fx-font-size: 16px; -fx-font-weight: 700;" +
                " -fx-focus-color: transparent; -fx-faint-focus-color: transparent;");
        btnLike.setOnAction(e -> {
            if (current == null) return;                 // kh√¥ng c√≥ b√†i th√¨ b·ªè qua
            boolean newFav = !current.isFavourite();     // ƒë·∫£o tr·∫°ng th√°i y√™u th√≠ch hi·ªán t·∫°i
            current.setFavourite(newFav);                // ghi v√†o model b√†i h√°t
            liked = newFav;                              // cache hi·ªÉn th·ªã
            FavouriteUI.onFavouriteToggled(current);
            btnLike.setTextFill(newFav ? Color.RED : Color.WHITE); // ƒë·ªè n·∫øu like, tr·∫Øng n·∫øu b·ªè like
            // TODO backend: setLiked(current, newFav)
        });



        // ‚Üª Repeat toggle ‚Äî gi·ªØ nguy√™n nh∆∞ c≈©
        Button btnRepeat = new Button("‚Üª");
        btnRepeat.setTextFill(Color.WHITE);
        btnRepeat.setBackground(Background.EMPTY);
        btnRepeat.setBorder(Border.EMPTY);
        btnRepeat.setFocusTraversable(false);
        btnRepeat.setStyle("-fx-background-color: transparent; -fx-font-size: 16px; -fx-font-weight: 700;" +
                " -fx-focus-color: transparent; -fx-faint-focus-color: transparent;");
        btnRepeat.setOnAction(e -> {
            repeating = !repeating;
            btnRepeat.setTextFill(repeating ? Color.DODGERBLUE : Color.WHITE);
            // TODO backend: setRepeat(repeating)
        });

        HBox rightBox = new HBox(12, volButton, vol, btnLike, btnRepeat);
        rightBox.setAlignment(Pos.CENTER_RIGHT);

        // ===== L·∫ÆP R√ÅP =====
        getChildren().addAll(leftBox, centerBox, rightBox);
    }

    // --- nh·∫≠n l·ªánh t·ª´ HomeUI: ph√°t 1 b√†i h√°t & c·∫≠p nh·∫≠t UI ---
    @Override
    public void play(Song song) {
        this.current = song;

        // Meta
        titleLbl.setText(song.getName());
        artistLbl.setText(song.getArtist());

        // T·ªïng th·ªùi l∆∞·ª£ng + reset progress
        int totalSeconds = Math.max(0, song.getDurationSeconds());
        progress.setMax(totalSeconds);
        progress.setValue(0);
        lblCurrent.setText("0:00");
        lblTotal.setText(String.format("%d:%02d", totalSeconds / 60, totalSeconds % 60));

        // Play state
        isPlaying = true;
        btnPlay.setText("‚è∏");

        // [ADDED] ƒê·ªìng b·ªô tr·∫°ng th√°i ‚ô• theo b√†i ƒëang ph√°t
        // Sync tr·∫°ng th√°i favourite -> m√†u tr√°i tim
        liked = song.isFavourite();                               // l·∫•y tr·∫°ng th√°i t·ª´ model
        btnLike.setTextFill(liked ? Color.RED : Color.WHITE);     // ƒë·ªè n·∫øu ƒë√£ like, tr·∫Øng n·∫øu ch∆∞a

        // (·ªü ƒë√¢y kh√¥ng gi·ªØ tham chi·∫øu btnLike n√™n kh√¥ng set ƒë∆∞·ª£c tr·ª±c ti·∫øp; ta ƒë√£ set trong onAction.
        // => Gi·∫£i ph√°p t·ªëi gi·∫£n: set l·∫°i m√†u b·∫±ng c√°ch d√≤ trong rightBox ho·∫∑c gi·ªØ tham chi·∫øu n√∫t.)
        // ==> Gi·ªØ t·ªëi gi·∫£n: l∆∞u tham chi·∫øu khi t·∫°o n√∫t:
    }

    // --- ƒë·∫£o play/pause khi b·∫•m n√∫t (gi·ªØ logic c≈©) ---
    @Override
    public void togglePause() {
        if (current == null) return; // ch∆∞a c√≥ b√†i ƒë·ªÉ play/pause
        isPlaying = !isPlaying;
        btnPlay.setText(isPlaying ? "‚è∏" : "‚èµ");
        // TODO: t·∫°m d·ª´ng/ti·∫øp t·ª•c audio th·∫≠t
        System.out.println(isPlaying ? "Resumed" : "Paused");
    }

    // --- x·ª≠ l√Ω Prev/Next (ƒë·∫∑t TODO ƒë·ªÉ g·ªçi playlist) ---
    private void onPrev() {
        // TODO: g·ªçi playlist controller ƒë·ªÉ l√πi b√†i, sau ƒë√≥ play(nextSong)
        System.out.println("Prev clicked");
    }
    private void onNext() {
        // TODO: g·ªçi playlist controller ƒë·ªÉ ti·∫øn b√†i, sau ƒë√≥ play(nextSong)
        System.out.println("Next clicked");
    }

    // --- expose state n·∫øu c·∫ßn ---
    public boolean isLiked() { return liked; }
    public boolean isRepeating() { return repeating; }
    public boolean isPlaying() { return isPlaying; }
}
